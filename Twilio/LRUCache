class Node
{
    int key;
    int value;
    Node next;
    Node prev;

    public Node(int k, int v)
    {
        key = k;
        value = v;
    }
}

public class LRUCache {
    int capacity;
    HashMap<Integer, Node> map = new HashMap<>();
    Node head = null;
    Node end = null;

    public LRUCache(int capacity) {
        this.capacity = capacity;
    }

    public int get(int key) {

        if(map.containsKey(key))
        {
            Node n = map.get(key);
            remove(n);
            setHead(n);
            return n.value;
        }
        return -1;
    }

    public void remove(Node n)
    {
        if(n.prev != null){
            n.prev.next = n.next;
        }
        else{
            head = n.next;
        }
        if(n.next != null)
        {
            n.next.prev = n.prev;
        }
        else{
            end = n.prev;
        }
    }

    public void setHead(Node n)
    {
        n.next = head;
        n.prev = null;

        if(head != null)
        {
            head.prev = n;
        }
        head = n;
        if(end == null)
        {
            end = head;
        }
    }

    public void put(int key, int value) {

        if(map.containsKey(key))
        {
            Node n = map.get(key);
            n.value = value;
            remove(n);
            setHead(n);
        }
        else{
            Node n = new Node(key, value);

            if(map.size() >= capacity)
            {
                map.remove(end.key);
                remove(end);
                setHead(n);
            }
            else{
                setHead(n);
            }
            map.put(key, n);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
