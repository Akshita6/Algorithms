import java.util.*;

public class Solution
{
    public static boolean isValidSudoku(char[][] board) {
        for(int i = 0; i<9; i++){
            HashSet<Character> rows = new HashSet<Character>();
            HashSet<Character> columns = new HashSet<Character>();
            HashSet<Character> cube = new HashSet<Character>();
            for (int j = 0; j < 9;j++){
                if(board[i][j]!='.' && !rows.add(board[i][j]))
                    return false;
                System.out.println("i=" + i + ", j=" + j + ", rows="+board[i][j]);
                if(board[j][i]!='.' && !columns.add(board[j][i]))
                    return false;
                System.out.println("i=" + i + ", j=" + j + ", cols=" + board[j][i]);
                int RowIndex = 3*(i/3);
                int ColIndex = 3*(i%3);
                if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.add(board[RowIndex + j/3][ColIndex + j%3]))
                    return false;
                System.out.println("RowIndex=" + RowIndex + j/3 + ", ColIndex=" + ColIndex + j%3 + ", cube=" + board[RowIndex + j/3][ColIndex + j%3]);
            }
        }
        return true;
    }

    public static void main(String[] args)
    {
        char arr[][] = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.' ,'.', '.', '8', '.', '.', '7', '9'}
        };

        System.out.println(isValidSudoku(arr));
    }

}
