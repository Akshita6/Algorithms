Complexity: O(n*n!) as there are n! permutations and each takes n time

/*
We fix each letter at first position at level 1, then at level 2, we fix 2nd characters and so on. and swap the forward remaining chars
as its a tree so we keep moving down
when we fix n - 1 char, nth letter is automatically fixed. backtracking

*/
class sample{

    public void permute(String s, int start, int len)
    {
        if(start == len)
        {
            System.out.println(s);
        }

        for(int i = start; i <= len; i++)
        {
            s = swap(s, start, i);
            permute(s, start + 1, len);
            s = swap(s, start, i);
        }
    }

    public String swap(String s, int i, int j)
    {
        char []ch = s.toCharArray();
        char tmp = ch[i];
        ch[i] = ch[j];
        ch[j] = tmp;
        return String.valueOf(ch);
    }

    public static void main(String []args)
    {
        sample s = new sample();
        String st = "abc";
        s.permute(st, 0, st.length() - 1);
    }
}
