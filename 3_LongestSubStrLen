// Non repeated substring

class Solution {
    public int lengthOfLongestSubstring(String s) {

        if(s == null || s.length() == 0)
        {
            return 0;
        }

        HashSet<Character> set = new HashSet<Character>();
        int i = 0, j = 0, max = 0;

        while(j < s.length())
        {
            if(!set.contains(s.charAt(j)))
            {
                set.add(s.charAt(j++));
                max = Math.max(max, set.size());
            }
            else{
                set.remove(s.charAt(i++));
            }
        }
        return max;
    }
}

public String LongestSubstring(String s) {

       if(s == null || s.length() == 0)
       {
           return "";
       }

       HashMap<Character, Integer> map = new HashMap<Character, Integer>();
       int max = 0;
       String result = "";
       StringBuilder sb = new StringBuilder();
       for(int i = 0; i < s.length(); i++)
       {
           char c = s.charAt(i);
           if(!map.containsKey(c))
           {
               map.put(c, i);
               sb.append(c);
           }
           else{
               i = map.get(c);
               sb = new StringBuilder();
               map.clear();
           }

           if(max < map.size())
           {
               max = map.size();
               result = sb.toString();
           }
       }
       return result;
   }
