class Edge{
    int x;
    int height;
    boolean isStart;

    public Edge(int x, int height, boolean isStart)
    {
        this.x = x;
        this.height = height;
        this.isStart = isStart;
    }
}

public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {

        List<int[]> result = new ArrayList<int[]>();

        if(buildings == null || buildings.length == 0 || buildings[0].length == 0)
        {
            return result;
        }

        // list of start and end edges so size will be 2*buildings.length
        List<Edge> edges = new ArrayList<Edge>();

        for(int[] building : buildings)
        {
            //start edge
            edges.add(new Edge(building[0], building[2], true));
            //end edge
            edges.add(new Edge(building[1], building[2], false));
        }

        Collections.sort(edges, new Comparator<Edge>() {
            public int compare(Edge a, Edge b)
            {
                if(a.x != b.x)
                {
                    return Integer.compare(a.x, b.x);
                }
                if(a.isStart && b.isStart)
                {
                    return Integer.compare(b.height, a.height);
                }
                if(!a.isStart && !b.isStart)
                {
                    return Integer.compare(a.height, b.height);
                }
                return a.isStart ? -1 : 1;
            }
        });

        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(10, Collections.reverseOrder());

        for(Edge edge : edges)
        {
            if(edge.isStart)
            {
                if(queue.isEmpty() || queue.peek() < edge.height)
                {
                    result.add(new int[] { edge.x, edge.height });
                }
                queue.add(edge.height);
            }
            else
            {
                queue.remove(edge.height);
                if(queue.isEmpty())
                {
                    result.add(new int[] { edge.x, 0});
                }
                else if(queue.peek() < edge.height){
                    result.add(new int[] { edge.x, queue.peek() });
                }
            }
        }
        return result;
    }
}
