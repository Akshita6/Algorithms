class Solution {
    public String minWindow(String s, String t) {

        if(t.length() > s.length() || t.length() == 0 || s.length() == 0)
        {
            return "";
        }

        String result = "";
        int count = 0, left = 0, min = Integer.MAX_VALUE;
        HashMap<Character,Integer> target = new HashMap<>();

        for(int i = 0; i < t.length(); i++)
        {
            char c = t.charAt(i);
            if(target.containsKey(c))
            {
                target.put(c, target.get(c) + 1);
            }
            else{
                target.put(c, 1);
            }
        }

        HashMap<Character, Integer> map = new HashMap<>();

        for(int i = 0; i < s.length(); i++)
        {
            char c = s.charAt(i);
            if(target.containsKey(c)){
                if(map.containsKey(c)){
                    if(map.get(c) < target.get(c)){
                        count++;
                    }
                    map.put(c, map.get(c) + 1);
                }
                else{
                    map.put(c, 1);
                    count++;
                }
            }

            if(count == t.length()){
                char sc = s.charAt(left);
                while(!map.containsKey(sc) || map.get(sc) > target.get(sc))
                {
                    if(map.containsKey(sc) && map.get(sc) > target.get(sc)){
                        map.put(sc, map.get(sc) - 1);
                    }
                    left++;
                    sc = s.charAt(left);
                }

                if(i - left + 1 < min)
                {
                    min = i - left + 1;
                    result = s.substring(left, i + 1);
                }
            }
        }
        return result;
    }
}
------------

public string minWindow(String s, String t)
{
  int []arr = new int[128];

  for(char c : t.toCharArray())
  {
    arr[c]++;
  }
  int counter = t.length();
  int begin = 0, end = 0, head = 0;
  int min = Integer.MAX_VALUE;

  while(end < s.length())
  {
    if(arr[s.charAt(end++)]-- > 0) // decrement the occurrane counter of that char by 1 as well
    {
      counter--;
    }
    while(counter == 0)
    {
      if(end - begin < min)
      {
        min = end - (head = begin);
      }
      if(arr[s.charAt(begin++)]++ == 0)
      {
        counter++;
      }
    }
  }
  return min == Integer.MAX_VALUE ? "" : s.substring(head, head + min);
}
